#!/bin/bash

# See "$ZENDESK_CODE_DIR/kubectl_config/bin/trigger_vpn_connection.applescript"

clickIf() {
  local text=$1
  local oppositeText=$2
  local debug_log="-- log"
  osascript <<SCRIPT >/dev/null
    tell application "System Events" to tell process "GlobalProtect"

      -- See if we can read the button text (maybe the GlobalProtect
      -- window is already open)
      local b

      try
        set b to title of button 2 of window 1
      on error err
        -- Couldn't read the button text, probably because
        -- the GlobalProtect protect window isn't open
        -- ("System Events encountered an error: Can't access window 1 of process "GlobalProtect". Invalid index.")
        $debug_log "rfa-vpn: Got error: " & err
        $debug_log "rfa-vpn: Clicking menu bar to see if that helps"

        click menu bar item 1 of menu bar 2

        -- Polling loop up to ~2 seconds for the button to appear
        local seq
        set seq to 20

        repeat while seq > 0
          try
            set b to title of button 2 of window 1
            set seq to 0
          on error err
            $debug_log "rfa-vpn: Got error " & err
            delay 0.1
            set seq to seq - 1
          end
        end
      end

      $debug_log "rfa-vpn: Button is available, and says '" & b & "'"

      if (b is "$oppositeText")
        $debug_log "rfa-vpn: Button already says $oppositeText, no click required"
      else if (b is "$text")
        $debug_log "rfa-vpn: Clicking '$text'"
        click button 2 of window 1
      end

      $debug_log "rfa-vpn: Closing window"
      click menu bar item 1 of menu bar 2
    end tell
SCRIPT
}

waitForEval() {
  local fragment=$1
  local i

  for ((i=0; $i<20; i=$i+1)) ; do
    sleep 1
    if eval "$fragment" ; then
      break
    fi
  done
}

isUp() {
  netstat -rn -f inet | grep -q 'default.*tun'
}

setSticky() {
  local DESIRED_STATE=$HOME/services/enabled/vpn-always/desired-state
  echo "$1" > $DESIRED_STATE 2> /dev/null
}

if [ "$1" == "--is-up" ] ; then
  isUp
  exit $?
elif [ "${1:---up}" == "--up" ] ; then
  if ! isUp ; then
    networksetup -setv6LinkLocal Wi-Fi
    clickIf Connect Disconnect
    if [ "$2" != "--no-wait" ] ; then
      waitForEval "isUp"
    fi
  fi
elif [ "$1" == "--down" ] ; then
  if isUp ; then
    clickIf Disconnect Connect
    if [ "$2" != "--no-wait" ] ; then
      waitForEval "! isUp"
    fi
  fi
elif [ "$1" == "--stay-up" ] ; then
  setSticky up
elif [ "$1" == "--stay-down" ] ; then
  setSticky down
else
  echo "Unrecognised usage ($1)"
  exit 2
fi
